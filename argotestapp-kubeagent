def clustername = params.ClusterName
def GIT_URL = params.Git_URL
def projectname = params.ProjectName
def reponame = params.RepoName
def annotation_name = params.Annotation_Name
def annotation_project = params.ProjectID
def annotation_tenant = params.Annotation_tenant
def annotation_wildcard = params.Annotation_wildcard
def email_flag = params.Email
def recipientList = params.Recipient_List
currentBuild.result = "SUCCESS"


podTemplate(cloud: 'ba0dcs01', containers: [
        containerTemplate(
                alwaysPullImage: false, args: '', command: '', image: 'bcr-de01.inside.bosch.cloud/poorfe/jnlp-slave:latest', livenessProbe: containerLivenessProbe(execArgs: '', failureThreshold: 0, initialDelaySeconds: 0, periodSeconds: 0, successThreshold: 0, timeoutSeconds: 0), name: 'jnlp', resourceLimitCpu: '', resourceLimitMemory: '', resourceRequestCpu: '', resourceRequestMemory: '', ttyEnabled: true, workingDir: '/home/jenkins'),
        containerTemplate(
                alwaysPullImage: false, args: '', command: '', image: 'bcr-de01.inside.bosch.cloud/poorfe/helm-kubectl:latest', livenessProbe: containerLivenessProbe(execArgs: '', failureThreshold: 0, initialDelaySeconds: 0, periodSeconds: 0, successThreshold: 0, timeoutSeconds: 0), name: 'helm-kubectl', resourceLimitCpu: '', resourceLimitMemory: '', resourceRequestCpu: '', resourceRequestMemory: '', ttyEnabled: true, workingDir: '/home/jenkins')
], imagePullSecrets: [ 'jenkinscred' ]) {

    print(POD_LABEL)
    node(POD_LABEL) {
		try {
			stage('Clone the git repository') {
				container('jnlp') {
					git credentialsId: "$GIT_CREDENTIALS_ID", url: "$GIT_URL"
				}
			}
			stage('Login to ArgoCD') {
				container('helm-kubectl') {
				    sh """#!/bin/bash
				    rancher login https://rb-dcs.bosch.com --token ${token} --skip-verify --context ${annotation_project}
				    password=`rancher kubectl -n argo-${projectname} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
				    argocd login argo-${projectname}.${annotation_wildcard} --grpc-web --username admin --password \$password --insecure
					"""
				}
			}
			stage('Connect repository to ArgoCD') {
				container('helm-kubectl') {
					sh """#!/bin/bash
					function repocreate() {
						cd ./poorfe-keys/
						argocd repo add ssh://git@sourcecode.socialcoding.bosch.com:7999/radium/radium_${reponame}.git --name ${projectname}-dummyapp --insecure-skip-server-verification --ssh-private-key-path id_rsa    
					}
					argocd repo list | grep ssh://git@sourcecode.socialcoding.bosch.com:7999/radium/radium_${reponame}.git > /dev/null
					repostatus=`echo \$?`
					if [ \$repostatus == 0 ] 
					then
						argocd repo get ssh://git@sourcecode.socialcoding.bosch.com:7999/radium/radium_${reponame}.git | grep Successful > /dev/null
						repostatus=`echo \$?`
						if [ \$repostatus == 0 ]
						then
							echo "Repository is connected successfully"
						else 
							echo "Removing repository & connecting again"
							argocd repo rm ssh://git@sourcecode.socialcoding.bosch.com:7999/radium/radium_${reponame}.git
							repocreate
						fi
					else
						echo "Adding repository"
						repocreate
					fi
					"""
				}
			}
			stage('Deploy application to ArgoCD') {
				container('helm-kubectl') {
					sh """#!/bin/bash
					function appcreate() {
						argocd app create ${projectname}-dummyapp \
						--repo ssh://git@sourcecode.socialcoding.bosch.com:7999/radium/radium_${reponame}.git \
						--path radium-dummyapp --dest-server https://kubernetes.default.svc \
						--helm-set-string annotation.name=${annotation_name} \
						--helm-set-string annotation.project=${annotation_project} \
						--helm-set-string annotation.tenant=${annotation_tenant} \
						--helm-set-string annotation.wildcard=${annotation_wildcard} \
						--helm-set-string namespace.name=${projectname}-nginxtestapp
						argocd app sync ${projectname}-dummyapp
					}
					argocd app list | grep ${projectname}-dummyapp > /dev/null
					appstatus=`echo \$?`
					if [ \$appstatus == 0 ]
					then
						argocd app get ${projectname}-dummyapp | grep Healthy > /dev/null
						appstatus=`echo \$?`
						if [ \$appstatus == 0 ]
						then
							echo "Redeploying the application"
							argocd app delete ${projectname}-dummyapp -y && sleep 30
							appcreate
						else
							echo "Deleting the application and deploying"
							argocd app delete ${projectname}-dummyapp -y && sleep 30
							appcreate
						fi
					else
						echo "Deploying application"
						appcreate	
					fi
					"""
				}
			}
		}
		catch(caughtError) {
			currentBuild.result = 'FAILURE'
			println "****** Error occured ****** ----> " + caughtError
		}
		if(email_flag){
			stage('Send Email') {
				emailSending('$BUILD_STATUS!!', "ArgoCD test Application", recipientList)
			}
		}
	}
}
def emailSending(def status, def info_string, def recipientList){
    def content = '''<body style="background-color:lightgrey;">
    <h1>Build ${BUILD_DISPLAY_NAME} is ${BUILD_STATUS}</h1>
    <a href="${PROJECT_URL}/${BUILD_NUMBER}">Build page</a>
    <a href="${JOB_URL}/${BUILD_NUMBER}/changes">Changes Since Last Build</a><br>
	Info: '''
    emailext body:  content + info_string,
            mimeType: 'text/html',
            replyTo: '$DEFAULT_REPLYTO',
            subject: status + '$JOB_NAME - Build $BUILD_DISPLAY_NAME',
			from: 'Serviceline.BMLP-ApplicationIntegraiton@bcn.bosch.com',
            to: recipientList
}
